@inject IJSRuntime JS
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div style="display: block; justify-content: center; align-items: center; 
        position: relative;
        width: @($"{Radius*2}px"); height: @($"{Radius*2}px");">
    <div class="discoBallLight" style="width: @($"{Radius*2}px"); height: @($"{Radius*2}px");" id="@($"{_discoBallGuid}-light")"></div>
    <div class="discoBall" style="width: @($"{Radius*2}px"); height: @($"{Radius*2}px");" id="@_discoBallGuid">
        <div class="discoBallMiddle" id="discoBallMiddle"></div>
    </div>
</div>
@code {

    [Parameter]
    public int Radius { get; set; } = DiscoBallSize.Small;
    private Guid _discoBallGuid = Guid.NewGuid();
    private int _previousRadius;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("createDiscoBall", Radius, _discoBallGuid);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_previousRadius != Radius)
        {
            // Handle the change in Radius
            await RedrawDiscoBall();
            _previousRadius = Radius; // Update the previous radius
        }
    }

    private async Task RedrawDiscoBall()
    {
        await JS.InvokeVoidAsync("clearDiscoBall", _discoBallGuid); // Clear existing disco ball elements
        await JS.InvokeVoidAsync("createDiscoBall", Radius, _discoBallGuid); // Create new disco ball
    }

    public class DiscoBallSize
    {
        public static int Tiny = 25;
        public static int Small = 50;
        public static int Medium = 100;
        public static int Large = 200;
        public static int XLarge = 400;
    }
}