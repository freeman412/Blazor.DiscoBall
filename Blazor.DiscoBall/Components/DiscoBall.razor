@inject IJSRuntime JS

<div style="display: block; justify-content: center; align-items: center; 
        position: relative;
        width: @($"{Radius*2}px"); height: @($"{Radius*2}px");">
    <div class="discoBallLight" style="width: @($"{Radius*2}px"); height: @($"{Radius*2}px");" id="@($"{_discoBallGuid}-light")"></div>
    <div class="discoBall" style="width: @($"{Radius*2}px"); height: @($"{Radius*2}px");" id="@_discoBallGuid">
        <div class="discoBallMiddle" id="discoBallMiddle"></div>
    </div>
</div>

@code {
    /// <summary>
    /// The Radius of the Disco Ball in pixels.
    /// </summary>
    [Parameter]
    public int Radius { get; set; } = DiscoBallSize.Small;
    /// <summary>
    /// Whether or not the Disco Ball should be colorful.
    /// </summary>
    [Parameter]
    public bool IsColorful { get; set; } = false;
    /// <summary>
    /// Whether or not the Disco Ball should have motion.
    /// </summary>
    [Parameter]
    public bool Motion { get; set; } = true;

    private Guid _discoBallGuid = Guid.NewGuid();
    private int _previousRadius;
    private bool _initialized;
    private bool _previousMotion;
    private bool _previousIsColorful;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            await JS.InvokeVoidAsync("createDiscoBall", Radius, _discoBallGuid, IsColorful);
            _previousRadius = Radius;
            _previousMotion = Motion;
            _previousIsColorful = IsColorful;
            _initialized = true;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_initialized)
        {
            if (_previousRadius != Radius | _previousIsColorful != IsColorful)
            {
                // Handle the change in Radius
                await RedrawDiscoBall();
                _previousRadius = Radius; // Update the previous radius
                _previousIsColorful = IsColorful;
            }
            if (_previousMotion != Motion)
            {
                if (_previousMotion == false && Motion == true)
                    await RestartDiscoBall();
                if(_previousMotion == true && Motion == false)
                    await PauseDiscoBall();
                _previousMotion = Motion;
            }
        }
    }

    private async Task RedrawDiscoBall()
    {
        await JS.InvokeVoidAsync("clearDiscoBall", _discoBallGuid); // Clear existing disco ball elements
        await JS.InvokeVoidAsync("createDiscoBall", Radius, _discoBallGuid, IsColorful); // Create new disco ball
    }

    private async Task PauseDiscoBall()
    {
        await JS.InvokeVoidAsync("pauseDiscoBall", _discoBallGuid.ToString());
    }

    private async Task RestartDiscoBall()
    {
        await JS.InvokeVoidAsync("restartDiscoBall", _discoBallGuid.ToString());
    }

    public class DiscoBallSize
    {
        public static int Tiny = 25;
        public static int Small = 50;
        public static int Medium = 100;
        public static int Large = 150;
        public static int XLarge = 200;
    }
}